@using OnlineLibrary.Web.Models.BooksManagement.CreateEditBookViewModels
@using System.Linq
@model CreateEditBookViewModel
@{
    ViewBag.Title = "CreateEdit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h2>Book Management</h2>

@section CSS{
    @Styles.Render("~/Content/cssjqueryUI")
    @Styles.Render("~/Content/css")
    <link href="~/Content/Views stylesheets/BooksManagement/CreateEdit.css" rel="stylesheet" />
}

<div>
    @using (Html.BeginForm("CreateEdit", "BooksManagement", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.ValidationSummary("", new { @class = "text-danger" })
        <div class="form-group">
            <label>ISBN</label>
            @Html.TextBoxFor(m => m.ISBN, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.ISBN)
        </div>
        <div class="form-group">
            <label>Title</label>
            @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Title)
        </div>
        <div class="form-group">
            <label>Description</label>
            @Html.TextAreaFor(m => m.Description, new { @class = "form-control", style = " height:200px " })
            @Html.ValidationMessageFor(m => m.Description)
        </div>
        <div class="form-group">
            <label>Publish Date</label>
            @Html.TextBoxFor(m => m.PublishDate, new { @class = "form-control datepicker ui-datepicker" })
            @Html.ValidationMessageFor(m => m.PublishDate)
        </div>
        <div class="form-group">
            <label>Front Cover</label>
        </div>
        if (!string.IsNullOrEmpty(Model.BookCover.FrontCover))
        {
            <img width="100" src=@Url.Content(Model.BookCover.FrontCover) />
                <input type="hidden" value="@Model.BookCover.FrontCover" name="BookCover.FrontCover" />
        }
        //Load Image
        <div class="form-group">
            <label class="inputFileButton">
                <input type="file" id="inputFile" name="BookCover.Image" class="inputfile" />
                <span>Upload Image</span>
            </label>
            <text id="textImageFileName"></text>
        </div>
        @Html.ValidationMessageFor(m => m.BookCover)

        <div id="bookAuthors">
            <hr />
            <h3>Authors:</h3>
            <table class="table table-hover">
                <tbody>
                    @for (int i = 0; i < Model.Authors.Count(); i++)
                {
                        <tr class="book-author" data-author-id="@i">
                            @Html.HiddenFor(m => m.Authors[i].Id)
                            @Html.HiddenFor(m => m.Authors[i].IsRemoved, new { @class = "is-removed" })
                            <td>
                                @Html.LabelFor(m => m.Authors[i].AuthorName.FirstName, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.Authors[i].AuthorName.FirstName, new { @class = "form-control" })
                            </td>
                            <td>
                                @Html.LabelFor(m => m.Authors[i].AuthorName.MiddleName)
                                @Html.TextBoxFor(m => m.Authors[i].AuthorName.MiddleName, new { @class = "form-control" })
                            </td>
                            <td>
                                @Html.LabelFor(m => m.Authors[i].AuthorName.LastName)
                                @Html.TextBoxFor(m => m.Authors[i].AuthorName.LastName, new { @class = "form-control" })
                            </td>
                            <td>
                                <button class="btn btn-sm btn-danger btn-remove-author-modal" data-toggle="modal"
                                        data-target="#removeAuthorConfirmation" type="button">
                                    <span class="glyphicon glyphicon-remove"></span>
                                </button>
                            </td>
                        </tr>
                        @Html.ValidationMessageFor(m => m.Authors[i].AuthorName)
                    }
                </tbody>
            </table>
            @Html.ValidationMessageFor(m => m.Authors)
        </div>
        <p class="form-group">
            <div class="modal fade" id="removeAuthorConfirmation" tabindex="-1" role="dialog">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <h4 class="modal-title" id="myModalLabel">Warning!</h4>
                        </div>
                        <div class="modal-body">
                            Are you sure you want to remove this author?
                        </div>
                        <div class="modal-footer">
                            <button id="btnRemoveAuthorConfirm" type="button" class="btn btn-primary" data-dismiss="modal">OK</button>
                            <button type="button" class="btn btn-primary" data-dismiss="modal">
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <input type="button" id="AddBookAuthor" value="Add Author" class="btn btn-default">
        </p>

        <div class="row" id="book-categories-subcategories">
            <div class="row">
                <div class="col-md-3">
                    <h4>Book Category</h4>
                </div>
                <div class="col-md-3">
                    <h4>Book Subcategory</h4>
                </div>
            </div>
            @for (int i = 0; i < Model.BookCategories.Count(); i++)
            {
                <div class="row book-category-subcategory" style="margin-top: 10px">
                    @Html.HiddenFor(m => m.BookCategories[i].IsRemoved, new { @class = "is-book-category-removed" })
                    <div class="col-md-3 book-category">
                        @Html.DropDownList($"BookCategories[{i}].Id", Model.BookCategories[i].Categories, new { @class = "form-control select-category" })                        
                    </div>
                    <div class="col-md-3 book-subcategory">
                        @if (Model.BookCategories[i].Subcategories != null)
                        {
                         @Html.DropDownList($"BookCategories[{i}].Subcategory.Id", Model.BookCategories[i].Subcategories, new { @class = "form-control" })
                        }
                    </div> 
                    <div class="col-md-2">
                        <button class="btn btn-sm btn-danger remove-book-category" type="button">
                            <span class="glyphicon glyphicon-remove"></span>
                        </button>
                    </div>                      
                </div>
            }
        </div>
        <button type="button" id="add-category" class="btn btn-default" style="margin-top: 10px">Add Category</button>

        <p> <h3>Book Copies:</h3> </p>

        <div id="bookCopies">
            <table id="bookCopyTable" class="col-sm-12 table-hover">

                @for (int i = 0; i < Model.BookCopies.Count(); i++)
                {
                    <tr id="bookCopy@(i)">
                        <td class="col-sm-2">BookCopyId = @Model.BookCopies[i].Id</td>
                        <td class="col-sm-3">
                            <div class="bookCopy">
                                @Html.HiddenFor(m => m.BookCopies[i].Id)
                                @Html.EnumDropDownListFor(m => m.BookCopies[i].BookCondition, new { @class = "form-control" })
                                <input class="IsToBeDeleted" type="hidden" name="BookCopies[@(i)].IsToBeDeleted" value="false" />
                            </div>
                        </td>
                        <td class="col-sm-7">
                            <!-- Trigger Button for DeleteBookCopyModal -->
                            <button type="button" class="btn btn-danger btn-sm passBookCopyForDelete" data-toggle="modal" data-target="#deleteCopy" data-book-copy-row-id="@i">
                                <span class="glyphicon glyphicon-remove"></span>
                            </button>
                        </td>
                    </tr>
                }
            </table>
        </div>

        <p> <input type="button" id="AddBookCopy" value="Add Copy" class="btn btn-primary" /> </p>
            @Html.ValidationMessageFor(m => m.BookCopies)

            <input type="submit" value="Save" class="btn btn-primary" />
    }
</div>

<!-- DeleteBookCopyModal  -->
<div class="modal fade" id="deleteCopy" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="deleteBookCopyLabel">Delete the current book copy</h4>
            </div>

            <div class="modal-body">
                <label>Are you sure you want to delete this book copy?</label>
            </div>
            <div class="modal-footer">
                <input id="bookCopyRowId" name="rowid" hidden="hidden" />
                <input id="bookCopyId" name="id" hidden="hidden" />
                <button type="submit" id="confirm-remove" class="btn btn-primary" data-dismiss="modal">Yes</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal">No</button>
            </div>
        </div>
    </div>
</div>

@section scripts {

    @Scripts.Render("~/bundles/jqueryui")

    <script>
        $(document).ready(function () {

            // Implement datepicker for datetime inputs on this page.
            $('.datepicker').datepicker({
                dateFormat: "mm-dd-yy",
                changeMonth: true,
                changeYear: true,
                yearRange: "-160:+0"
            });

            // Shows uploaded file name next to the Image Upload button
            $("#inputFile").click(function () {
                var inputs = document.querySelectorAll('.inputfile');
                Array.prototype.forEach.call(inputs, function (input) {

                    var text = document.getElementById("textImageFileName")

                    input.addEventListener('change', function (e) {
                        var fileName = '';
                        fileName = e.target.value.split('\\').pop();
                        if (fileName)
                            text.innerHTML = fileName;
                    });
                });
            });

            $("#add-category").click(function () {
                // Retreive all sub categories.
                var ajaxData = {
                    method: "GET",
                    complete: function (jqXhr) {
                        var categories = jqXhr.responseJSON;
                        var mainDiv = $("#book-categories-subcategories");

                        // Index for next category is equal with number of book-category-subcatery divs.
                        var index = mainDiv.children(".book-category-subcategory").length;

                        // New book-category-subcategory div.
                        var categorySubcategryDiv = document.createElement("div");
                        categorySubcategryDiv.className = "row book-category-subcategory"
                        $(categorySubcategryDiv).css("margin-top", "10px");

                        var isRemovedInput = document.createElement("input");
                        isRemovedInput.className = "is-book-category-removed";
                        isRemovedInput.name = "BookCategories[" + index + "].IsRemoved";
                        isRemovedInput.type = "hidden";
                        isRemovedInput.value = false;
                        categorySubcategryDiv.appendChild(isRemovedInput);

                        // New category div.
                        var categoryDiv = document.createElement("div");
                        categoryDiv.className = "col-md-3 book-category";

                        // New subcateogry div.
                        var subcategoryDiv = document.createElement("div");
                        subcategoryDiv.className = "col-md-3 book-subcategory";

                        var select = document.createElement("select");
                        select.className = "form-control";
                        select.id = "select-category";
                        select.name = "BookCategories[" + index + "].Id";
                        $(select).bind("change", addSubcategory);

                        for (var i = 0; i < categories.length; i++) {
                            var option = document.createElement("option");
                            option.value = categories[i].Value
                            option.text = categories[i].Name
                            select.appendChild(option);

                        }
                        categoryDiv.appendChild(select);

                        // New Delete category div/button
                        var deleteCategoryDiv = document.createElement("div");
                        deleteCategoryDiv.className = "col-md-2";
                        var button = document.createElement("button");
                        button.className = "btn btn-sm btn-danger remove-book-category";
                        button.type = "button";
                        $(button).bind("click", deleteCategory);
                        var span = document.createElement("span");
                        span.className = "glyphicon glyphicon-remove";
                        button.appendChild(span);
                        deleteCategoryDiv.appendChild(button);

                        // Add all elements on mainDiv.
                        categorySubcategryDiv.appendChild(categoryDiv);
                        categorySubcategryDiv.appendChild(subcategoryDiv);
                        categorySubcategryDiv.appendChild(deleteCategoryDiv);
                        mainDiv.append(categorySubcategryDiv);
                    }
                };
                $.ajax("@Url.Action("ListBookCategories", "BooksManagement")", ajaxData);
            });
        });

        function addSubcategory() {
            var id = parseInt( $(this).val() );
            var subcategoryDiv = $(this).parent().siblings(".book-subcategory");
            var selectName = this.name;
            var subcategoryName = selectName.replace("Id", "Subcategory.Id")

            var ajaxData = {
                method: "GET",
                data: { categoryId : id },
                success: function (data) {

                    var subcategories = data;
                    subcategoryDiv.empty()
                    var select = document.createElement("select");
                    select.className = "form-control";
                    select.name = subcategoryName;

                    for (var i = 0; i < subcategories.length; i++) {
                        var option = document.createElement("option");
                        option.value = subcategories[i].Value
                        option.text = subcategories[i].Name
                        select.appendChild(option);
                    }
                    subcategoryDiv.append(select);
                }
            };
            $.ajax("@Url.Action("ListBookSubcategories","BooksManagement")", ajaxData);
        }

        function deleteCategory() {
            $(this).parent().parent().children(".is-book-category-removed").val(true);
            var element = $(this).parent().parent();
            $(element).fadeOut(1000);
        }

        $(".select-category").change(addSubcategory);

        $(".remove-book-category").click(deleteCategory);

        $("#btnRemoveAuthorConfirm").click(function () {
            var authorIdToRemove = $(this).attr("data-author-to-remove-id");

            $("#bookAuthors table tbody tr[data-author-id='" + authorIdToRemove + "'] .is-removed").first().val(true);
            var authorRowToRemove = $("#bookAuthors table tbody tr[data-author-id='" + authorIdToRemove + "']").fadeOut(1000);
        });

        // Copies the author ID to modal window.
        function btnRemoveAuthorModal() {
            var authorId = $(this).closest(".book-author").data("authorId");
            $("#btnRemoveAuthorConfirm").attr("data-author-to-remove-id", authorId);
        }

        $(".btn-remove-author-modal").click(btnRemoveAuthorModal);

        $(document).ready(function () {
            $("#AddBookAuthor").click(function () {
                var authorsBody = $("#bookAuthors tbody");
                var newBookAuthorId = parseInt($("#bookAuthors tbody .book-author").last().data("authorId")) + 1;

                if (isNaN(newBookAuthorId)) {
                    newBookAuthorId = 0;
                }

                // Create a div for new Author
                var newAuthorRow = document.createElement("tr");
                newAuthorRow.className = "book-author";
                newAuthorRow.setAttribute("data-author-id", newBookAuthorId);

                // Create inputs for Author data.
                // IsRemoved.
                var cell = document.createElement("td");

                var isRemovedInput = document.createElement("input");
                isRemovedInput.className = "is-removed";
                isRemovedInput.name = "Authors[" + newBookAuthorId + "].IsRemoved";
                isRemovedInput.type = "hidden";
                isRemovedInput.value = "false";

                // First Name.
                cell = document.createElement("td");

                var firstNameLabel = document.createElement("label");
                firstNameLabel.htmlFor = "Authors_" + newBookAuthorId + "__AuthorName.FirstName";
                firstNameLabel.innerHTML = "First Name";

                var firstNameInput = document.createElement("input");
                firstNameInput.name = "Authors[" + newBookAuthorId + "].AuthorName.FirstName";
                firstNameInput.id = "Authors_" + newBookAuthorId + "__AuthorName.FirstName";
                firstNameInput.type = "text";
                firstNameInput.className = "form-control";

                cell.appendChild(isRemovedInput);
                cell.appendChild(firstNameLabel);
                cell.appendChild(firstNameInput);
                newAuthorRow.appendChild(cell);

                // Middle Name.
                cell = document.createElement("td");

                var middleNameLabel = document.createElement("label");
                middleNameLabel.htmlFor = "Authors_" + newBookAuthorId + "__AuthorName.MiddleName";
                middleNameLabel.innerHTML = "Middle Name";

                var middleNameInput = document.createElement("input");
                middleNameInput.id = "Authors_" + newBookAuthorId + "__AuthorName.MiddleName";
                middleNameInput.name = "Authors[" + newBookAuthorId + "].AuthorName.MiddleName";
                middleNameInput.type = "text";
                middleNameInput.className = "form-control";

                cell.appendChild(middleNameLabel);
                cell.appendChild(middleNameInput);
                newAuthorRow.appendChild(cell);

                // Last Name.
                cell = document.createElement("td");

                var lastNameLabel = document.createElement("label");
                lastNameLabel.htmlFor = "Authors_" + newBookAuthorId + "__AuthorName.LastName";
                lastNameLabel.innerHTML = "Last Name";

                var lastNameInput = document.createElement("input");
                lastNameInput.id = "Authors_" + newBookAuthorId + "__AuthorName.LastName";
                lastNameInput.name = "Authors[" + newBookAuthorId + "].AuthorName.LastName";
                lastNameInput.type = "text";
                lastNameInput.className = "form-control";

                cell.appendChild(lastNameLabel);
                cell.appendChild(lastNameInput);
                newAuthorRow.appendChild(cell);

                // Button.
                cell = document.createElement("td");

                var removeButton = document.createElement("button");
                removeButton.className = "btn btn-sm btn-danger btn-remove-author-modal";
                removeButton.type = "button";
                removeButton.setAttribute("data-toggle", "modal");
                removeButton.setAttribute("data-target", "#removeAuthorConfirmation");
                $(removeButton).click(btnRemoveAuthorModal);

                // Button icon.
                var removeButtonIcon = document.createElement("span");
                removeButtonIcon.className = "glyphicon glyphicon-remove";
                removeButton.appendChild(removeButtonIcon);

                cell.appendChild(removeButton);
                newAuthorRow.appendChild(cell);

                // Add new Author div to all authors
                authorsBody.append(newAuthorRow);
            })

            $(".passBookCopyForDelete").click(function () {
                rowid = $(this).data('bookCopyRowId');
            });

            $("#confirm-remove").click(function () {
                var trToHide = $("#bookCopy" + rowid);
                trToHide.fadeOut(1000, function () {
                    trToHide.hide();
                })
                $("#bookCopy" + rowid + " .bookCopy .IsToBeDeleted").attr("value", "true");
            });

            $("#AddBookCopy").click(function () {
                // Retreive book conditions.
                var ajaxData = {
                    method: "GET",
                    complete: function (jqXHR) {
                        var bookConditions = jqXHR.responseJSON;

                        var newId = 0;

                        var newBookCopyRowId = parseInt($(".passBookCopyForDelete").last().attr("data-book-copy-row-id")) + 1;

                        if (isNaN(newBookCopyRowId)) {
                            newBookCopyRowId = 0;
                        }

                        var newTr = document.createElement("tr");
                        newTr.id = "bookCopy" + newBookCopyRowId;

                        var newTd = document.createElement("td");
                        newTd.className = "col-sm-2";
                        newTd.innerHTML = "BookCopyId = newId";

                        var newTd2 = document.createElement("td");
                        newTd2.className = "col-sm-3";

                        var newTd3 = document.createElement("td");
                        newTd3.className = "col-sm-7";

                        var newDiv = document.createElement("div");
                        newDiv.className = "bookCopy"

                        var newInput = document.createElement("input");
                        newInput.className = "IsToBeDeleted";
                        newInput.type = "hidden";
                        newInput.name = "BookCopies[" + newBookCopyRowId + "].IsToBeDeleted";
                        newInput.value = "false";

                        var bookCopySelect = document.createElement("select");
                        bookCopySelect.id = "BookCopies_" + newBookCopyRowId + "__BookCondition";
                        bookCopySelect.name = "BookCopies[" + newBookCopyRowId + "].BookCondition";
                        bookCopySelect.className = "form-control";

                        // Fill dropdown.
                        for (var i = 0; i < bookConditions.length; i++) {
                            var optionElement = document.createElement("option");
                            optionElement.value = bookConditions[i].Value;
                            optionElement.innerHTML = bookConditions[i].Name;

                            bookCopySelect.appendChild(optionElement);
                        }

                        // Remove button
                        var newRemoveButton = document.createElement("button");
                        newRemoveButton.className = "btn btn-danger btn-sm passBookCopyForDelete";
                        newRemoveButton.type = "button";
                        newRemoveButton.setAttribute("data-toggle", "modal");
                        newRemoveButton.setAttribute("data-target", "#deleteCopy");
                        newRemoveButton.setAttribute("data-book-copy-row-id", newBookCopyRowId);

                        // Button icon.
                        var newRemoveButtonIcon = document.createElement("span");
                        newRemoveButtonIcon.className = "glyphicon glyphicon-remove";
                        newRemoveButton.appendChild(newRemoveButtonIcon);

                        newDiv.appendChild(newInput);
                        newDiv.appendChild(bookCopySelect);
                        newTd2.appendChild(newDiv);
                        newTd3.appendChild(newRemoveButton);
                        newTr.appendChild(newTd);
                        newTr.appendChild(newTd2);
                        newTr.appendChild(newTd3);

                        $("#bookCopies table").append(newTr);

                        $(".passBookCopyForDelete").click(function () {
                            rowid = $(this).data('bookCopyRowId');
                        });

                        $("#confirm-remove").click(function () {
                            var trToHide = $("#bookCopy" + rowid);
                            trToHide.fadeOut(1000, function () {
                                trToHide.hide();
                            })
                            $("#bookCopy" + rowid + " .bookCopy .IsToBeDeleted").attr("value", "true");
                        });
                    }
                }
                $.ajax("@Url.Action("ListBookConditions", "BooksManagement")", ajaxData);
            })
        });

    </script>

}

